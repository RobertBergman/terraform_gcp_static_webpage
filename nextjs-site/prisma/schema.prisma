generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
}

enum CookingSkill {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum DietaryRestriction {
  VEGETARIAN
  VEGAN
  GLUTEN_FREE
  DAIRY_FREE
  NUT_FREE
  KOSHER
  HALAL
  PALEO
  KETO
  LOW_CARB
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  emailVerified      DateTime?
  name               String?
  image              String?
  subscriptionTier   SubscriptionTier     @default(FREE)
  subscriptionEnd    DateTime?
  stripeCustomerId   String?              @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  preferences        UserPreferences?
  receipts           Receipt[]
  mealPlans          MealPlan[]
  sessions           Session[]
  accounts           Account[]
}

model UserPreferences {
  id                 String               @id @default(cuid())
  userId             String               @unique
  cookingSkill       CookingSkill         @default(BEGINNER)
  maxPrepTime        Int                  @default(30) // in minutes
  dietaryRestrictions DietaryRestriction[]
  avoidIngredients   String[]
  favoriteIngredients String[]
  householdSize      Int                  @default(2)
  openRouterApiKey   String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Receipt {
  id                 String               @id @default(cuid())
  userId             String
  imageUrl           String?
  pdfUrl             String?
  rawText            String?
  parsedData         Json?                // Store parsed items as JSON
  totalAmount        Float?
  storeName          String?
  purchaseDate       DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  ingredients        Ingredient[]
  mealPlans          MealPlan[]
}

model Ingredient {
  id                 String               @id @default(cuid())
  receiptId          String
  name               String
  quantity           Float?
  unit               String?
  category           String?
  price              Float?
  createdAt          DateTime             @default(now())

  receipt            Receipt              @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  recipes            RecipeIngredient[]
}

model MealPlan {
  id                 String               @id @default(cuid())
  userId             String
  receiptId          String?
  name               String
  weekStartDate      DateTime
  weekEndDate        DateTime
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  receipt            Receipt?             @relation(fields: [receiptId], references: [id], onDelete: SetNull)
  recipes            Recipe[]
}

model Recipe {
  id                 String               @id @default(cuid())
  mealPlanId         String
  name               String
  description        String?
  instructions       String[]
  prepTime           Int                  // in minutes
  cookTime           Int                  // in minutes
  servings           Int
  difficulty         CookingSkill
  imageUrl           String?
  dayOfWeek          Int                  // 0 = Sunday, 6 = Saturday
  mealType           String               // breakfast, lunch, dinner, snack
  calories           Int?
  protein            Float?
  carbs              Float?
  fat                Float?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  mealPlan           MealPlan             @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  ingredients        RecipeIngredient[]
}

model RecipeIngredient {
  id                 String               @id @default(cuid())
  recipeId           String
  ingredientId       String?
  name               String               // Store name even if ingredient not linked
  quantity           Float
  unit               String
  notes              String?

  recipe             Recipe               @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient         Ingredient?          @relation(fields: [ingredientId], references: [id], onDelete: SetNull)

  @@unique([recipeId, ingredientId])
}

// NextAuth models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}